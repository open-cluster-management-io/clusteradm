// Copyright Contributors to the Open Cluster Management project
package util

type clusterConfig struct {
	name    string
	context string
}

func (cc *clusterConfig) Name() string {
	return cc.name
}

func (cc *clusterConfig) Context() string {
	return cc.context
}

type clusterValues struct {
	hub  *clusterConfig
	mcl1 *clusterConfig
	mcl2 *clusterConfig
}

func (cv *clusterValues) Hub() *clusterConfig {
	return cv.hub
}

func (cv *clusterValues) ManagedCluster1() *clusterConfig {
	return cv.mcl1
}

func (cv *clusterValues) ManagedCluster2() *clusterConfig {
	return cv.mcl2
}

type values struct {
	// cv stores the clusters infomation
	cv *clusterValues
	// ho stores the handledOutput of join hub command generated by hub init.
	ho *handledOutput
}

type TestE2eConfig struct {
	values     *values
	clusteradm *clusteradm

	ClearEnv func()
}

func (tec *TestE2eConfig) JoinHubValue() *handledOutput {
	return tec.values.ho
}

func (tec *TestE2eConfig) Cluster() *clusterValues {
	return tec.values.cv
}

func (tec *TestE2eConfig) Clusteradm() clusteradmInterface {
	return &clusteradm{}
}

func NewTestE2eConfig(
	hub string,
	hubctx string,
	mcl1 string,
	mcl1ctx string,
	mcl2 string,
	mcl2ctx string,
) *TestE2eConfig {

	ctx := clusterValues{
		hub: &clusterConfig{
			name:    hub,
			context: hubctx,
		},
		mcl1: &clusterConfig{
			name:    mcl1,
			context: mcl1ctx,
		},
		mcl2: &clusterConfig{
			name:    mcl2,
			context: mcl2ctx,
		},
	}

	cfgval := values{
		cv: &ctx,
	}

	return &TestE2eConfig{
		values:     &cfgval,
		clusteradm: &clusteradm{},
	}
}
